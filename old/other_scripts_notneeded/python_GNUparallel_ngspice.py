#!/usr/bin/env python

#Multiple spice decks that were generated using deckgen in the remote machine, will be run using ngspice and GNU Parallel on the cluster. We can also ssh to other machines which have GNU Parallel and ngspice installed. ssh-keygen should have been done so that it would not ask for ssh password everytime we ssh to the machines.

#Example usage: python python_gnu_ngspice.py --num=10 --ssh=/home/user1/simulations/decoder_optimised/decoder_node_1/sshmachines.txt --dir=/home/user1/simulations/decoder_optimised/decoder_node_1/decoder_node_1_line1 --spc=decoder_node_1_line1_sim


import optparse
import re,os
import fileinput
import glob
import shutil


from optparse import OptionParser

parser = OptionParser('Run ngspice parallely on the multiple spice decks on the 48-core cluster machine, using an utility called GNU parallel')
parser.add_option("-n", "--num", type="int", dest="num_spice",help="Enter the number of spice decks to be simulated")
parser.add_option("-s", "--ssh", dest="ssh_txt",help="Enter the path to the text file which contains the IP addresses of the machines to which we can ssh to run ngspice using GNU Parallel. Eg is provided in sshmachines.txt")
parser.add_option("-d", "--dir", dest="directory",help="Enter the path where the spice decks are present on this machine and on those machines where you want to ssh. The path should be the same in all machines. So, pls mention for eg: ~/ for 'home' folder, instead of /home/user/ etc")
parser.add_option("-f", "--spc", dest="spice",help="Enter the spice file names at the above path. Exclude the '_1', '_2' etc")

(options, args) = parser.parse_args()

num_spice=options.num_spice
ssh_txt=options.ssh_txt
directory=options.directory
spice_name=options.spice

#######################PRE-PROCESSING#######################
##Delete the existing results files and log files first, before launching the new set of simulations

#if for eg., a folder called decoder is copied to ~/simulations folder, the spice decks will be generated by the deckgen.pl inside the decoder folder.
#the path to the spice decks will be ~/simulations/decoder/spice_sim. This folder will contain the decks to be simulated and they will create csv files as output. The existing files need to be removed before launching a new set of simulations

if os.path.exists('%s' %directory):
	os.chdir('%s' %directory)
	for f in glob.glob("*.csv"):
		os.remove(f)
		print "****Deleting the existing csv files****"
	

####################### NGSPICE SIMULATION RUN#######################
##seq 1 n - run n decks in current directory
# This is to execute GNU Parallel. +0 means utilise all cores in the processor.
#--sshloginfile file.txt uses the IP addresses of machines given the file.txt to ssh to them and run simulations. 
#THESE MACHINES SHOULD HAVE 'GNU Parallel' AND NGSPICE INSTALLED IN THEM. AND ALSO, SSH-KEY-GEN SHOULD BE DONE TO DO A PASSWORD-LESS LOGIN

print "\n****Launching GNU Parallel to run ngspice simulations****\n"
os.system("seq 1 %d| parallel --progress -j +0 --sshloginfile %s 'cd %s && ngspice %s_{}.sp' " % (num_spice, ssh_txt, directory,spice_name))

print "\n****Completed ngspice simulations on all machines****\n"
print "****Resulting csv files are saved in the same folder in which the spice decks are****\n"



#######################Now do the post processing of the result files#######################

#Combine all the csv results files and place the resulting file in the results folder
#Creating results folder

#Removing the existing combined results file in the results folder
if os.path.isfile("%s/results/final_results_spice_outputs.csv" %directory):
	print "****Removing the existing combined results file in results folder****\n"
	os.remove("%s/results/final_results_spice_outputs.csv" %directory)

fh = open("%s/results/headers.csv" %directory,"r")
header=fh.read()

fw1 = open("%s/results/final_results_spice_outputs.csv" %directory,"w")
#Write the header first and then write the csv outputs of the rest of the files
fw1.write(header)
#The following is the header which will be written by the NetlistFrmt.pl script into the final_results_spice_outputs_decoder.csv file
#fw1.write("deckname, RISE_DFF0_glitch , RISE_DFF1_glitch , RISE_DFF2_glitch , RISE_DFF3_glitch , RISE_DFF4_glitch , RISE_DFF5_glitch , RISE_DFF6_glitch , RISE_DFF7_glitch , RISE_DFF0_noglitch , RISE_DFF1_noglitch , RISE_DFF2_noglitch , RISE_DFF3_noglitch , RISE_DFF4_noglitch , RISE_DFF5_noglitch , RISE_DFF6_noglitch , RISE_DFF7_noglitch , FALL_DFF0_glitch , FALL_DFF1_glitch , FALL_DFF2_glitch , FALL_DFF3_glitch , FALL_DFF4_glitch , FALL_DFF5_glitch , FALL_DFF6_glitch , FALL_DFF7_glitch , FALL_DFF0_noglitch , FALL_DFF1_noglitch , FALL_DFF2_noglitch , FALL_DFF3_noglitch , FALL_DFF4_noglitch , FALL_DFF5_noglitch , FALL_DFF6_noglitch , FALL_DFF7_noglitch, process_id \n")
for num in range(1,num_spice): 
	fr = open("%s/flipped_outputs_decoder_node_1_line1_%i.csv" %(directory,num), "r")
	data=fr.read()
	fw1.write(data)
	fr.close()

fw1.close()
print "****Combined all csv files into a single file in the results folder along with the header****\n"









